{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"3mol","url":"http://yoursite.com","root":"/"},"pages":[{"title":"第二栏目","date":"2019-03-25T15:05:51.000Z","updated":"2019-03-25T15:05:51.183Z","comments":true,"path":"第二栏目/index.html","permalink":"http://yoursite.com/第二栏目/index.html","excerpt":"","text":""}],"posts":[{"title":"线程的基础知识 [2]","slug":"线程基础知识 【2】","date":"2019-03-26T07:24:58.000Z","updated":"2019-03-26T08:18:16.631Z","comments":true,"path":"2019/03/26/线程基础知识 【2】/","link":"","permalink":"http://yoursite.com/2019/03/26/线程基础知识 【2】/","excerpt":"一、 互斥同步Java 提供两种锁机制控制多线程对共享资源的互斥访问 JVM 提供的 synchronized JDK 提供的 ReentrantLock synchronized 同步代码块 12345public void func() &#123; synchronized (this) &#123; // ... &#125;&#125;","text":"一、 互斥同步Java 提供两种锁机制控制多线程对共享资源的互斥访问 JVM 提供的 synchronized JDK 提供的 ReentrantLock synchronized 同步代码块 12345public void func() &#123; synchronized (this) &#123; // ... &#125;&#125; 同步方法 123public synchronized void func () &#123; // ...&#125; 同步类 12345public void func() &#123; synchronized (SynchronizedExample.class) &#123; // ... &#125;&#125; 同步静态方法 123public synchronized static void func() &#123; // ...&#125; ReentrantLock123456789101112131415public class LockExample &#123; private Lock lock = new ReentrantLock(); public void func() &#123; lock.lock(); try &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.print(i + \" \"); &#125; &#125; finally &#123; lock.unlock(); // 确保释放锁，从而避免发生死锁。 &#125; &#125;&#125; 他们的区别1. 锁的实现 synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。 2. 性能 新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。 3. 等待可中断 当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。 ReentrantLock 可中断，而 synchronized 不行。 4. 公平锁 公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。 synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。 5. 锁绑定多个条件 一个 ReentrantLock 可以同时绑定多个 Condition 对象。 如何选择如何需要使用到 ReentrantLock 中的高级功能（长时间等待可放弃、公平锁、可绑定多个 Condition ），否则优先使用 synchronized。因为 synchronized 是 JVM 的实现，JVM 原生支持，而ReentrantLock 就不是所有 JDK 都支持的。而且不用担心锁没有释放而导致的死锁的问题，因为 JVM 会确保锁的释放。【如何实现？怎么释放锁的？】 多个线程协作如何确保做完一个线程后执行另一个线程？如何通知线程挂起和恢复？如何","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"多线程","slug":"多线程","permalink":"http://yoursite.com/tags/多线程/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"hexo 入门常用语句","slug":"hexo 入门常用语句","date":"2019-03-25T13:54:58.000Z","updated":"2019-03-26T08:16:16.986Z","comments":true,"path":"2019/03/25/hexo 入门常用语句/","link":"","permalink":"http://yoursite.com/2019/03/25/hexo 入门常用语句/","excerpt":"常用语句：1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写形式：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 命令组合12hexo s -g #生成并本地预览hexo d -g #生成并上传","text":"常用语句：1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写形式：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 命令组合12hexo s -g #生成并本地预览hexo d -g #生成并上传 编写博客语句 1hexo new &apos;my-first-blog&apos; # 新建一篇名字为my-first-blog的文章 他会在source/_posts下创建my-first-blog的md文件，里面默认创建好了一个模板1234567title: 文章名date: 时间categories: 所属分类tags: [hexo] #标签，可以多个标签，需要使用数组的格式定义description: 摘要内容文章体... 创建一个名字叫 a_new_page 的页面1hexo new page &quot;a new page&quot; 他不是作为一个栏目出现，而是一个页面https://github用户名.github.io/a_new_page/index.html","categories":[{"name":"默认","slug":"默认","permalink":"http://yoursite.com/categories/默认/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"线程的基础知识 [1]","slug":"线程基础知识 【1】","date":"2019-03-25T13:54:58.000Z","updated":"2019-03-26T08:16:33.985Z","comments":true,"path":"2019/03/25/线程基础知识 【1】/","link":"","permalink":"http://yoursite.com/2019/03/25/线程基础知识 【1】/","excerpt":"一、线程的状态转换过程","text":"一、线程的状态转换过程 New(创建线程，但是未启动) Blocking(某线程加上排他锁,禁止其他线程访问) Waiting(无确定的限期,待通知唤醒) 等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。 | 进入方法 | 退出方法 || —————————————— | ———————————— || 没有设置 Timeout 参数的 Object.wait() 方法 | Object.notify() / Object.notifyAll() || 没有设置 Timeout 参数的 Thread.join() 方法 | 被调用的线程执行完毕 || LockSupport.park() 方法 | LockSupport.unpark(Thread) | Timed Waiting(限期等待) 无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。 调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。 调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。 睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。 阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。 | 进入方法 | 退出方法 || —————————————- | ———————————————– || Thread.sleep() 方法 | 时间结束 || 设置了 Timeout 参数的 Object.wait() 方法 | 时间结束 / Object.notify() / Object.notifyAll() || 设置了 Timeout 参数的 Thread.join() 方法 | 时间结束 / 被调用的线程执行完毕 || LockSupport.parkNanos() 方法 | LockSupport.unpark(Thread) || LockSupport.parkUntil() 方法 | LockSupport.unpark(Thread) | 死亡 可以是线程结束任务之后自己结束，或者产生了异常而结束 二、如何使用线程?有三种方式 实现 Runnable 接口 实现 Callable 接口 继承 Thread 类 他们有什么区别吗？实现了 Runnable 和 Callback 的类可以作为一个可以在线程中运行的任务，不是真正意义上的线程，最后还是需要通过 Thread 来调用。所以说任务是通过线程驱动（Thread）从而执行的。 实现 Runnable 接口需要实现它的 run 方法。通过 Thread 实例的 start() 启动线程，让线程进入 Runnable 状态。 12345public class MyRunnable implements Runnable &#123; public void run() &#123; System.out.println(\"我进入了线程\"); &#125;&#125; 12345678910public class Main&#123; public static void main(String[] args) &#123; // 创建线程任务 MyRunnable instance = new MyRunnable(); // 创建线程 Thread thread = new Thread(instance); // 启动线程 thread.start(); &#125;&#125; 实现 Callable 接口需要注意 Callable 方法可以设置返回值，返回值通过 FutureTask 封装，使用 FutureTask#get 获取。1234567891011121314public class Main &#123; public static void main(String[] args) throws ExecutionException, InterruptedException &#123; // 创建线程任务 MyCallable instance2 = new MyCallable(); // 返回值通过 FutureTask 进行封装,任务完成之后通过 FutureTask#get 获取返回值 FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(instance2); // 创建线程 Thread thread2 = new Thread(ft); // 启动线程 thread2.start(); // 获取线程的返回值 System.out.println(ft.get()); &#125;&#125; 继承 Thread 类需要实现 run() 方法，因为 Thread 内部是实现了Runable 接口。 当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。 1234567// Thread#run()@Override public void run() &#123; if (target != null) &#123; target.run(); &#125; &#125; 1234public static void main(String[] args) &#123; MyThread mt = new MyThread(); mt.start();&#125; 12345public class MyThread extends Thread &#123; public void run() &#123; System.out.println(\"线程运行\"); &#125;&#125; 使用接口还是使用 Thread ？前者更好，因为 Java 不支持多重继承，使用接口容易对类进行扩展。 类继承了 Runnable 或 Callable 并实现对应的方法即可放入 Thread 运行，而继承整个类开销就大了。 三、基础线程机制Executor Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。 异步是指多个任务的执行互不干扰，不需要进行同步操作。 主要有三种 Executor： CachedThreadPool：一个任务创建一个线程； FixedThreadPool：所有任务只能使用固定大小的线程； SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。 1234567public static void main(String[] args) &#123; ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 5; i++) &#123; executorService.execute(new MyRunnable()); &#125; executorService.shutdown();&#125; Daemon 守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。 main() 属于非守护线程，新建的Thread为为守护线程，daemon 成员默认为false。 使用 setDaemon() 方法将一个线程设置为守护线程。 1234public static void main(String[] args) &#123; Thread thread = new Thread(new MyRunnable()); thread.setDaemon(true);&#125; Thread.sleep()Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。 sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。 1234567public void run() &#123; try &#123; Thread.sleep(3000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125; ##Thread.yield() 礼让：对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。 该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。 123public void run() &#123; Thread.yield();&#125; 四、中断一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。 InterruptedException通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。 对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。 123456789101112131415public class InterruptExample &#123; private static class MyThread1 extends Thread &#123; @Override public void run() &#123; try &#123; Thread.sleep(2000); // 由于 main 线程执行了 interrupt() 导致下面的语句不会执行 System.out.println(\"Thread run\"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 1234567public static void main(String[] args) throws InterruptedException &#123; Thread thread1 = new MyThread1(); thread1.start(); // 马上中断 thread1.interrupt(); System.out.println(\"Main run\");&#125; 123456Main runjava.lang.InterruptedException: sleep interrupted at java.lang.Thread.sleep(Native Method) at InterruptExample.lambda$main$0(InterruptExample.java:5) at InterruptExample$$Lambda$1/713338599.run(Unknown Source) at java.lang.Thread.run(Thread.java:745) interupted()如果一个线程的 run() 是无限循环的，没有 sleep() 等操作抛出 InterruptedException 的操作，那么这个线程是无法通过 Thread#interrupt 进行停止。 那么如何停止这个勤劳的线程呢？ 其实在执行 Thread#interrupt 方法时，会设置 interrupt 标识这个线程需要中断。 123456789101112131415public void interrupt() &#123; if (this != Thread.currentThread()) checkAccess(); synchronized (blockerLock) &#123; Interruptible b = blocker; if (b != null) &#123; // 设置中断标识 interrupt0(); // Just to set the interrupt flag b.interrupt(this); return; &#125; &#125; interrupt0();&#125; 继续跟进 interrupt0() 会发现是一个 native 方法，查看 Thread 方法列表其实有一个 interrupted() 方法可以获取这个标识 123456789101112/** * Tests whether the current thread has been interrupted. ... ... * @return &lt;code&gt;true&lt;/code&gt; if the current thread has been interrupted; * &lt;code&gt;false&lt;/code&gt; otherwise. * @see #isInterrupted() * @revised 6.0 */ public static boolean interrupted() &#123; return currentThread().isInterrupted(true); &#125; 接下来就是使用 interrupted() 方法在 run() 当中进行是否中断的判断 123456789101112public class InterruptExample &#123; private static class MyThread2 extends Thread &#123; @Override public void run() &#123; while (!interrupted()) &#123; // .. &#125; System.out.println(\"Thread end\"); &#125; &#125;&#125; 12345public static void main(String[] args) throws InterruptedException &#123; Thread thread2 = new MyThread2(); thread2.start(); thread2.interrupt();&#125; 执行结果：1Thread end Executor 的中断操作调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。 以下使用 Lambda 创建 线程，相当于创建了一个匿名内部线程。 12345678910111213public static void main(String[] args) &#123; ExecutorService executorService = Executors.newCachedThreadPool(); executorService.execute(() -&gt; &#123; try &#123; Thread.sleep(2000); System.out.println(\"Thread run\"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); executorService.shutdownNow(); System.out.println(\"Main run\");&#125; 12345678Main runjava.lang.InterruptedException: sleep interrupted at java.lang.Thread.sleep(Native Method) at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9) at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) 只想中断 Executor 中的一个线程呢？ 可以通过使用 submit() 方法来提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。 1234Future&lt;?&gt; future = executorService.submit(() -&gt; &#123; // ..&#125;);future.cancel(true);","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"多线程","slug":"多线程","permalink":"http://yoursite.com/tags/多线程/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-25T13:11:11.410Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2019/03/25/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}